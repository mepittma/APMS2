complexes = get_comps(tab_sig$Prey,corum)
interactome_prots = unique(c(get_prots(complexes, corum), tab_sig$Prey))
# Get gene names for interactome
interactome_genes = quant_unimap$GeneSymbol[match(interactome_prots, quant_unimap$UniProt)]
interactome_genes = unlist(strsplit(interactome_genes, "; "))
# Remove blacklist genes from interactome and coerce BFDR score to 1
if (KO_status == "Y"){
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
tab$BFDR[which(tab$Genes %in% blacklist)] <- 1
interactome_genes <- interactome_genes[which(!interactome_genes %in% blacklist)]
}
# Get true (0 = no interaction, 1 = interaction)
int_prot = quant_unimap$UniProt[which(quant_unimap$GeneSymbol == int_type)]
#response = iref_response_list(int_prot, tab$Prey, iref)
#iRefAUC = auc(response = response, predictor=1 - tab$BFDR)
DNV_fish = get_fisher(DNV_cases, DNV_ctrls, interactome_genes)
LoF_fish = get_fisher(LoF_cases, LoF_ctrls, interactome_genes)
# Save into results table
method = paste0("saintx_", level, "_FDR", FDR_cutoff, "_KOfilt", KO_status)
method_vec = c(method_vec, method)
DNV_vec = c(DNV_vec, DNV_fish[1])
LoF_vec = c(LoF_vec, LoF_fish[1])
############################ saintq
for(norm_status in c("Y", "N")){
if(norm_status == "Y"){n = "true"
} else{n = "false"
}
tab = read.table(file = paste0(base_path, "/intermediate/interaction_scoring/saintq/",
int_type, "_", level_type, "_norm_", n,".txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
# Choose significant genes
tab_sig = subset(tab, tab$BFDR < FDR_cutoff)
# Corum expansion
complexes = get_comps(tab_sig$Prey,corum)
interactome_prots = unique(c(get_prots(complexes, corum), tab_sig$Prey))
# Get gene names for interactome
interactome_genes = quant_unimap$GeneSymbol[match(interactome_prots, quant_unimap$UniProt)]
interactome_genes = unlist(strsplit(interactome_genes, "; "))
# Remove blacklist genes from interactome and coerce BFDR score to 1
if (KO_status == "Y"){
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
tab$BFDR[which(tab$Genes %in% blacklist)] <- 1
interactome_genes <- interactome_genes[which(!interactome_genes %in% blacklist)]
}
# Get true (0 = no interaction, 1 = interaction)
int_prot = quant_unimap$UniProt[which(quant_unimap$GeneSymbol == int_type)]
#response = iref_response_list(int_prot, tab$Prey, iref)
#iRefAUC = auc(response = response, predictor=1 - tab$BFDR)
DNV_fish = get_fisher(DNV_cases, DNV_ctrls, interactome_genes)
LoF_fish = get_fisher(LoF_cases, LoF_ctrls, interactome_genes)
# Save into results table
method = paste0("saintq_", level, "_FDR", FDR_cutoff, "_KOfilt", KO_status,"_norm",norm_status)
method_vec = c(method_vec, method)
DNV_vec = c(DNV_vec, DNV_fish[1])
LoF_vec = c(LoF_vec, LoF_fish[1])
}
}
}
}
res = cbind(method_vec, DNV_vec, LoF_vec)
names(res) = c("Method", "DNV_pvalue", "LoF_pvalue")
write.table(res, file = paste0(base_path, "/output/interactome_selection/", int_type, "score_table.tsv"),
sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
}
for(int_type in c("GATA4", "TBX5", "NKX25")){
# Create a 34x3 matrix to score results
method_vec = c()
DNV_vec = c()
LoF_vec = c()
for(FDR_cutoff in c(0.05, 0.1)){
for(KO_status in c("Y", "N")){
### FC ###
for(FC in c("FCA", "FCB")){
# Read in data, get gene names
tab = read.table(file = paste0(base_path, "/intermediate/interaction_scoring/",FC, "/", int_type, "_", FC,".txt"),
sep = "\t", header = TRUE, stringsAsFactors = FALSE)
tab$Genes = quant_unimap$GeneSymbol[match(tab$Proteins, quant_unimap$UniProt)]
# Choose significant genes
tab_sig = subset(tab, tab[,FC] > quantile(tab[,FC], prob = 1 - FDR_cutoff))
# Corum expansion
complexes = get_comps(tab_sig$Proteins,corum)
interactome_prots = unique(c(get_prots(complexes, corum), tab_sig$Proteins))
# Get gene names for interactome
interactome_genes = quant_unimap$GeneSymbol[match(interactome_prots, quant_unimap$UniProt)]
interactome_genes = unlist(strsplit(interactome_genes, "; "))
# Remove blacklist genes from interactome and coerce FC score to 0
if (KO_status == "Y"){
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
tab$scaled_FC[which(tab$Genes %in% blacklist)] <- 0
interactome_genes <- interactome_genes[which(!interactome_genes %in% blacklist)]
}
# Get true (0 = no interaction, 1 = interaction)
int_prot = quant_unimap$UniProt[which(quant_unimap$GeneSymbol == int_type)]
#response = iref_response_list(int_type, tab$Proteins, iref)
#iRefAUC = auc(response = response, predictor=FCA_tab$scaled_FCA)
DNV_fish = get_fisher(DNV_cases, DNV_ctrls, interactome_genes)
LoF_fish = get_fisher(LoF_cases, LoF_ctrls, interactome_genes)
# Save into results table
method = paste0(FC, "_FDR", FDR_cutoff, "_KOfilt", KO_status)
method_vec = c(method_vec, method)
DNV_vec = c(DNV_vec, DNV_fish[1])
LoF_vec = c(LoF_vec, LoF_fish[1])
}
######################
### Original lists ###
tab = read.csv(paste0(base_path, "/input/precomp_interactomes/interactomes.csv"), sep = "\t",
stringsAsFactors = FALSE)
interactome_genes = tab$Prey_genename[which(tab$Bait == int_type)]
# Remove blacklist genes from interactome and coerce FC score to 0
if (KO_status == "Y"){
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
interactome_genes <- interactome_genes[which(!interactome_genes %in% blacklist)]
}
# Fisher p
DNV_fish = get_fisher(DNV_cases, DNV_ctrls, interactome_genes)
LoF_fish = get_fisher(LoF_cases, LoF_ctrls, interactome_genes)
# Save into results table
method = paste0("original_KOfilt", KO_status)
method_vec = c(method_vec, method)
DNV_vec = c(DNV_vec, DNV_fish[1])
LoF_vec = c(LoF_vec, LoF_fish[1])
############################### saintx
for(level_type in c("protein", "peptide")){
# Read in data, get gene names
if(level_type == "protein"){
tab = read.table(file = paste0(base_path, "/intermediate/interaction_scoring/saintExpress/", int_type, "_msspc.txt"),
sep = "\t", header = TRUE, stringsAsFactors = FALSE)
} else if (level_type == "peptide"){
tab = read.table(file = paste0(base_path, "/intermediate/interaction_scoring/saintExpress/", int_type, "_msint.txt"),
sep = "\t", header = TRUE, stringsAsFactors = FALSE)
}
tab$Genes = quant_unimap$GeneSymbol[match(tab$Prey, quant_unimap$UniProt)]
# Choose significant genes
tab_sig = subset(tab, tab$BFDR < FDR_cutoff)
# Corum expansion
complexes = get_comps(tab_sig$Prey,corum)
interactome_prots = unique(c(get_prots(complexes, corum), tab_sig$Prey))
# Get gene names for interactome
interactome_genes = quant_unimap$GeneSymbol[match(interactome_prots, quant_unimap$UniProt)]
interactome_genes = unlist(strsplit(interactome_genes, "; "))
# Remove blacklist genes from interactome and coerce BFDR score to 1
if (KO_status == "Y"){
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
tab$BFDR[which(tab$Genes %in% blacklist)] <- 1
interactome_genes <- interactome_genes[which(!interactome_genes %in% blacklist)]
}
# Get true (0 = no interaction, 1 = interaction)
int_prot = quant_unimap$UniProt[which(quant_unimap$GeneSymbol == int_type)]
#response = iref_response_list(int_prot, tab$Prey, iref)
#iRefAUC = auc(response = response, predictor=1 - tab$BFDR)
DNV_fish = get_fisher(DNV_cases, DNV_ctrls, interactome_genes)
LoF_fish = get_fisher(LoF_cases, LoF_ctrls, interactome_genes)
# Save into results table
method = paste0("saintx_", level_type, "_FDR", FDR_cutoff, "_KOfilt", KO_status)
method_vec = c(method_vec, method)
DNV_vec = c(DNV_vec, DNV_fish[1])
LoF_vec = c(LoF_vec, LoF_fish[1])
############################ saintq
for(norm_status in c("Y", "N")){
if(norm_status == "Y"){n = "true"
} else{n = "false"
}
tab = read.table(file = paste0(base_path, "/intermediate/interaction_scoring/saintq/",
int_type, "_", level_type, "_norm_", n,".txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
# Choose significant genes
tab_sig = subset(tab, tab$BFDR < FDR_cutoff)
# Corum expansion
complexes = get_comps(tab_sig$Prey,corum)
interactome_prots = unique(c(get_prots(complexes, corum), tab_sig$Prey))
# Get gene names for interactome
interactome_genes = quant_unimap$GeneSymbol[match(interactome_prots, quant_unimap$UniProt)]
interactome_genes = unlist(strsplit(interactome_genes, "; "))
# Remove blacklist genes from interactome and coerce BFDR score to 1
if (KO_status == "Y"){
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
tab$BFDR[which(tab$Genes %in% blacklist)] <- 1
interactome_genes <- interactome_genes[which(!interactome_genes %in% blacklist)]
}
# Get true (0 = no interaction, 1 = interaction)
int_prot = quant_unimap$UniProt[which(quant_unimap$GeneSymbol == int_type)]
#response = iref_response_list(int_prot, tab$Prey, iref)
#iRefAUC = auc(response = response, predictor=1 - tab$BFDR)
DNV_fish = get_fisher(DNV_cases, DNV_ctrls, interactome_genes)
LoF_fish = get_fisher(LoF_cases, LoF_ctrls, interactome_genes)
# Save into results table
method = paste0("saintq_", level_type, "_FDR", FDR_cutoff, "_KOfilt", KO_status,"_norm",norm_status)
method_vec = c(method_vec, method)
DNV_vec = c(DNV_vec, DNV_fish[1])
LoF_vec = c(LoF_vec, LoF_fish[1])
}
}
}
}
res = cbind(method_vec, DNV_vec, LoF_vec)
names(res) = c("Method", "DNV_pvalue", "LoF_pvalue")
write.table(res, file = paste0(base_path, "/output/interactome_selection/", int_type, "score_table.tsv"),
sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
}
######################## Setup ########################
base_path = "/Users/student/Documents/PollardLab/APMS2"
out_path = paste0(base_path, "/output/permutations")
library(ggplot2)
source(paste0(base_path, "/code/perm_functions.R"))
# Read in corum data
corum <- read.table(paste0(base_path, "/input/databases/corum_human_CytoscapeFormatted.txt"),
sep = "\t", fill = TRUE, header = TRUE, stringsAsFactors = FALSE)
corum <- as.data.frame(corum[,c(1:8)])
# Read in variant data
source(paste0(base_path, "/code/load_data/load_variants.R"))
# Read in alias conversion file
unimap = read.table(paste0(base_path, "/input/aliases/UniMap.txt"),header = TRUE, sep = "\t", stringsAsFactors = FALSE)
quant_unimap = read.table(paste0(base_path, "/input/aliases/combined_unimap.txt"),header = TRUE, sep = "\t", stringsAsFactors = FALSE)
quant_unimap <- unique(quant_unimap)
source(paste0(base_path, "/code/functions/permutation_functions.R"))
#get_fisher, get_OR, get_prots, get_sig_compl, perm_viz, permute_status
######################## Permutation test: Corum-expanded ########################
n_perm = 1000
for(int_type in c("GATA4", "NKX25", "TBX5")){
# Load in GATA4 scores (saintq protein scoring)
if (int_type == "GATA4"){
int_tab = read.table(file = paste0(base_path, "/intermediate/interaction_scoring/saintq/GATA4_protein_normY.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
} else{
int_tab = read.table(file = paste0(base_path,"/intermediate/interaction_scoring/saintq/", int_type, "_peptide_norm_Y.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
}
# Choose significant genes
tab_sig = subset(tab, tab$BFDR < 0.05)
# Corum expansion
complexes = get_comps(tab_sig$Prey,corum)
interactome_prots = unique(c(get_prots(complexes, corum), tab_sig$Prey))
# Get gene names for interactome
interactome_genes = quant_unimap$GeneSymbol[match(interactome_prots, quant_unimap$UniProt)]
interactome_genes = unlist(strsplit(interactome_genes, "; "))
# Remove blacklist genes from interactome
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
interactome_genes <- interactome_genes[which(!interactome_genes %in% blacklist)]
svg(file= paste0(out_path, "/permutations/", int_type, ".pdf"))
DNV_OR <- get_OR(DNV_cases, DNV_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV")
DNV_permList <- permute_status(DNV_cases, DNV_ctrls, geneList, n_perm)
perm_viz(DNV_permList, DNV_OR, "DNV", int_type)
LoF_OR <- get_OR(LoF_cases, LoF_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="LoF")
LoF_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(LoF_permList, LoF_OR, "LoF", int_type)
syn_OR <- get_OR(DNV_case_syn, DNV_ctrl_syn, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV-syn")
syn_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(syn_permList, syn_OR, "syn-DNV", int_type)
dev.off()
}
base_path = "/Users/student/Documents/PollardLab/APMS2"
out_path = paste0(base_path, "/output/permutations")
library(ggplot2)
source(paste0(base_path, "/code/perm_functions.R"))
source(paste0(base_path, "/code/permutaion_functions.R"))
source(paste0(base_path, "/code/functions/permutaion_functions.R"))
source(paste0(base_path, "/code/functions/permutation_functions.R"))
# Read in corum data
corum <- read.table(paste0(base_path, "/input/databases/corum_human_CytoscapeFormatted.txt"),
sep = "\t", fill = TRUE, header = TRUE, stringsAsFactors = FALSE)
corum <- as.data.frame(corum[,c(1:8)])
# Read in variant data
source(paste0(base_path, "/code/load_data/load_variants.R"))
# Read in alias conversion file
unimap = read.table(paste0(base_path, "/input/aliases/UniMap.txt"),header = TRUE, sep = "\t", stringsAsFactors = FALSE)
quant_unimap = read.table(paste0(base_path, "/input/aliases/combined_unimap.txt"),header = TRUE, sep = "\t", stringsAsFactors = FALSE)
quant_unimap <- unique(quant_unimap)
n_perm = 1000
for(int_type in c("GATA4", "NKX25", "TBX5")){
# Load in GATA4 scores (saintq protein scoring)
if (int_type == "GATA4"){
int_tab = read.table(file = paste0(base_path, "/intermediate/interaction_scoring/saintq/GATA4_protein_norm_true.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
} else{
int_tab = read.table(file = paste0(base_path,"/intermediate/interaction_scoring/saintq/", int_type, "_peptide_norm_true.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
}
# Choose significant genes
tab_sig = subset(tab, tab$BFDR < 0.05)
# Corum expansion
complexes = get_comps(tab_sig$Prey,corum)
interactome_prots = unique(c(get_prots(complexes, corum), tab_sig$Prey))
# Get gene names for interactome
interactome_genes = quant_unimap$GeneSymbol[match(interactome_prots, quant_unimap$UniProt)]
interactome_genes = unlist(strsplit(interactome_genes, "; "))
# Remove blacklist genes from interactome
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
interactome_genes <- interactome_genes[which(!interactome_genes %in% blacklist)]
svg(file= paste0(out_path, "/permutations/", int_type, ".pdf"))
DNV_OR <- get_OR(DNV_cases, DNV_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV")
DNV_permList <- permute_status(DNV_cases, DNV_ctrls, geneList, n_perm)
perm_viz(DNV_permList, DNV_OR, "DNV", int_type)
LoF_OR <- get_OR(LoF_cases, LoF_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="LoF")
LoF_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(LoF_permList, LoF_OR, "LoF", int_type)
syn_OR <- get_OR(DNV_case_syn, DNV_ctrl_syn, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV-syn")
syn_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(syn_permList, syn_OR, "syn-DNV", int_type)
dev.off()
}
n_perm = 1000
for(int_type in c("GATA4", "NKX25", "TBX5")){
# Load in GATA4 scores (saintq protein scoring)
if (int_type == "GATA4"){
tab = read.table(file = paste0(base_path, "/intermediate/interaction_scoring/saintq/GATA4_protein_norm_true.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
} else{
tab = read.table(file = paste0(base_path,"/intermediate/interaction_scoring/saintq/", int_type, "_peptide_norm_true.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
}
# Choose significant genes
tab_sig = subset(tab, tab$BFDR < 0.05)
# Corum expansion
complexes = get_comps(tab_sig$Prey,corum)
interactome_prots = unique(c(get_prots(complexes, corum), tab_sig$Prey))
# Get gene names for interactome
interactome_genes = quant_unimap$GeneSymbol[match(interactome_prots, quant_unimap$UniProt)]
interactome_genes = unlist(strsplit(interactome_genes, "; "))
# Remove blacklist genes from interactome
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
interactome_genes <- interactome_genes[which(!interactome_genes %in% blacklist)]
svg(file= paste0(out_path, "/permutations/", int_type, ".pdf"))
DNV_OR <- get_OR(DNV_cases, DNV_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV")
DNV_permList <- permute_status(DNV_cases, DNV_ctrls, geneList, n_perm)
perm_viz(DNV_permList, DNV_OR, "DNV", int_type)
LoF_OR <- get_OR(LoF_cases, LoF_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="LoF")
LoF_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(LoF_permList, LoF_OR, "LoF", int_type)
syn_OR <- get_OR(DNV_case_syn, DNV_ctrl_syn, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV-syn")
syn_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(syn_permList, syn_OR, "syn-DNV", int_type)
dev.off()
}
source(paste0(base_path, "/code/functions/score_interactomes.R"))
n_perm = 1000
for(int_type in c("GATA4", "NKX25", "TBX5")){
# Load in GATA4 scores (saintq protein scoring)
if (int_type == "GATA4"){
tab = read.table(file = paste0(base_path, "/intermediate/interaction_scoring/saintq/GATA4_protein_norm_true.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
} else{
tab = read.table(file = paste0(base_path,"/intermediate/interaction_scoring/saintq/", int_type, "_peptide_norm_true.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
}
# Choose significant genes
tab_sig = subset(tab, tab$BFDR < 0.05)
# Corum expansion
complexes = get_comps(tab_sig$Prey,corum)
interactome_prots = unique(c(get_prots(complexes, corum), tab_sig$Prey))
# Get gene names for interactome
interactome_genes = quant_unimap$GeneSymbol[match(interactome_prots, quant_unimap$UniProt)]
interactome_genes = unlist(strsplit(interactome_genes, "; "))
# Remove blacklist genes from interactome
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
interactome_genes <- interactome_genes[which(!interactome_genes %in% blacklist)]
svg(file= paste0(out_path, "/permutations/", int_type, ".pdf"))
DNV_OR <- get_OR(DNV_cases, DNV_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV")
DNV_permList <- permute_status(DNV_cases, DNV_ctrls, geneList, n_perm)
perm_viz(DNV_permList, DNV_OR, "DNV", int_type)
LoF_OR <- get_OR(LoF_cases, LoF_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="LoF")
LoF_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(LoF_permList, LoF_OR, "LoF", int_type)
syn_OR <- get_OR(DNV_case_syn, DNV_ctrl_syn, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV-syn")
syn_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(syn_permList, syn_OR, "syn-DNV", int_type)
dev.off()
}
for(int_type in c("GATA4", "NKX25", "TBX5")){
# Load in GATA4 scores (saintq protein scoring)
if (int_type == "GATA4"){
tab = read.table(file = paste0(base_path, "/intermediate/interaction_scoring/saintq/GATA4_protein_norm_true.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
} else{
tab = read.table(file = paste0(base_path,"/intermediate/interaction_scoring/saintq/", int_type, "_peptide_norm_true.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
}
# Choose significant genes
tab_sig = subset(tab, tab$BFDR < 0.05)
# Corum expansion
complexes = get_comps(tab_sig$Prey,corum)
interactome_prots = unique(c(get_prots(complexes, corum), tab_sig$Prey))
# Get gene names for interactome
interactome_genes = quant_unimap$GeneSymbol[match(interactome_prots, quant_unimap$UniProt)]
interactome_genes = unlist(strsplit(interactome_genes, "; "))
# Remove blacklist genes from interactome
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
geneList <- interactome_genes[which(!interactome_genes %in% blacklist)]
svg(file= paste0(out_path, "/permutations/", int_type, ".pdf"))
DNV_OR <- get_OR(DNV_cases, DNV_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV")
DNV_permList <- permute_status(DNV_cases, DNV_ctrls, geneList, n_perm)
perm_viz(DNV_permList, DNV_OR, "DNV", int_type)
LoF_OR <- get_OR(LoF_cases, LoF_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="LoF")
LoF_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(LoF_permList, LoF_OR, "LoF", int_type)
syn_OR <- get_OR(DNV_case_syn, DNV_ctrl_syn, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV-syn")
syn_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(syn_permList, syn_OR, "syn-DNV", int_type)
dev.off()
}
svg(paste0(out_path, "/permutations/test.svg"))
install.packages("svelte")
install.packages("svglite")
install.packages("gdtools")
install.packages("gdtools")
plot(1,1)
######################## Setup ########################
base_path = "/Users/student/Documents/PollardLab/APMS2"
out_path = paste0(base_path, "/output/permutations")
library(ggplot2)
source(paste0(base_path, "/code/functions/permutation_functions.R"))
#get_fisher, get_OR, get_prots, get_sig_compl, perm_viz, permute_status
source(paste0(base_path, "/code/functions/score_interactomes.R"))
#get_comps, get_prots, get_fisher, iref_response_list
# Read in corum data
corum <- read.table(paste0(base_path, "/input/databases/corum_human_CytoscapeFormatted.txt"),
sep = "\t", fill = TRUE, header = TRUE, stringsAsFactors = FALSE)
corum <- as.data.frame(corum[,c(1:8)])
# Read in variant data
source(paste0(base_path, "/code/load_data/load_variants.R"))
# Read in alias conversion file
unimap = read.table(paste0(base_path, "/input/aliases/UniMap.txt"),header = TRUE, sep = "\t", stringsAsFactors = FALSE)
quant_unimap = read.table(paste0(base_path, "/input/aliases/combined_unimap.txt"),header = TRUE, sep = "\t", stringsAsFactors = FALSE)
quant_unimap <- unique(quant_unimap)
######################## Permutation test: Corum-expanded ########################
n_perm = 1000
for(int_type in c("GATA4", "NKX25", "TBX5")){
# Load in GATA4 scores (saintq protein scoring)
if (int_type == "GATA4"){
tab = read.table(file = paste0(base_path, "/intermediate/interaction_scoring/saintq/GATA4_protein_norm_true.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
} else{
tab = read.table(file = paste0(base_path,"/intermediate/interaction_scoring/saintq/", int_type, "_peptide_norm_true.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
}
# Choose significant genes
tab_sig = subset(tab, tab$BFDR < 0.05)
# Corum expansion
complexes = get_comps(tab_sig$Prey,corum)
interactome_prots = unique(c(get_prots(complexes, corum), tab_sig$Prey))
# Get gene names for interactome
interactome_genes = quant_unimap$GeneSymbol[match(interactome_prots, quant_unimap$UniProt)]
interactome_genes = unlist(strsplit(interactome_genes, "; "))
# Remove blacklist genes from interactome
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
geneList <- interactome_genes[which(!interactome_genes %in% blacklist)]
pdf(file= paste0(out_path, "/permutations/", int_type, ".pdf"))
DNV_OR <- get_OR(DNV_cases, DNV_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV")
DNV_permList <- permute_status(DNV_cases, DNV_ctrls, geneList, n_perm)
perm_viz(DNV_permList, DNV_OR, "DNV", int_type)
LoF_OR <- get_OR(LoF_cases, LoF_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="LoF")
LoF_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(LoF_permList, LoF_OR, "LoF", int_type)
syn_OR <- get_OR(DNV_case_syn, DNV_ctrl_syn, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV-syn")
syn_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(syn_permList, syn_OR, "syn-DNV", int_type)
dev.off()
}
######################## Setup ########################
base_path = "/Users/student/Documents/PollardLab/APMS2"
out_path = paste0(base_path, "/output/permutations")
library(ggplot2)
source(paste0(base_path, "/code/functions/permutation_functions.R"))
#get_fisher, get_OR, get_prots, get_sig_compl, perm_viz, permute_status
source(paste0(base_path, "/code/functions/score_interactomes.R"))
#get_comps, get_prots, get_fisher, iref_response_list
# Read in corum data
corum <- read.table(paste0(base_path, "/input/databases/corum_human_CytoscapeFormatted.txt"),
sep = "\t", fill = TRUE, header = TRUE, stringsAsFactors = FALSE)
corum <- as.data.frame(corum[,c(1:8)])
# Read in variant data
source(paste0(base_path, "/code/load_data/load_variants.R"))
# Read in alias conversion file
unimap = read.table(paste0(base_path, "/input/aliases/UniMap.txt"),header = TRUE, sep = "\t", stringsAsFactors = FALSE)
quant_unimap = read.table(paste0(base_path, "/input/aliases/combined_unimap.txt"),header = TRUE, sep = "\t", stringsAsFactors = FALSE)
quant_unimap <- unique(quant_unimap)
######################## Permutation test: Corum-expanded ########################
n_perm = 1000
for(int_type in c("GATA4", "NKX25", "TBX5")){
# Load in GATA4 scores (saintq protein scoring)
if (int_type == "GATA4"){
tab = read.table(file = paste0(base_path, "/intermediate/interaction_scoring/saintq/GATA4_protein_norm_true.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
} else{
tab = read.table(file = paste0(base_path,"/intermediate/interaction_scoring/saintq/", int_type, "_peptide_norm_true.txt"),
sep = "\t", stringsAsFactors = FALSE, fill = TRUE, header = TRUE, comment.char = "")
}
# Choose significant genes
tab_sig = subset(tab, tab$BFDR < 0.05)
# Corum expansion
complexes = get_comps(tab_sig$Prey,corum)
interactome_prots = unique(c(get_prots(complexes, corum), tab_sig$Prey))
# Get gene names for interactome
interactome_genes = quant_unimap$GeneSymbol[match(interactome_prots, quant_unimap$UniProt)]
interactome_genes = unlist(strsplit(interactome_genes, "; "))
# Remove blacklist genes from interactome
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
geneList <- interactome_genes[which(!interactome_genes %in% blacklist)]
pdf(file= paste0(out_path, int_type, ".pdf"))
DNV_OR <- get_OR(DNV_cases, DNV_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV")
DNV_permList <- permute_status(DNV_cases, DNV_ctrls, geneList, n_perm)
perm_viz(DNV_permList, DNV_OR, "DNV", int_type)
LoF_OR <- get_OR(LoF_cases, LoF_ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type="LoF")
LoF_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(LoF_permList, LoF_OR, "LoF", int_type)
syn_OR <- get_OR(DNV_case_syn, DNV_ctrl_syn, geneList, fisher = TRUE, int_type=int_type, mut_type="DNV-syn")
syn_permList <- permute_status(LoF_cases, LoF_ctrls, geneList, n_perm)
perm_viz(syn_permList, syn_OR, "syn-DNV", int_type)
dev.off()
}
svg(paste0(out_path, "/permutations/test.svg"))
install.packages("Cairo")
capabilities("cairo")
