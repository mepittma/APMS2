base_path = "/Users/student/Documents/PollardLab/APMS2"
library(pROC)
# Read in alias conversion file
unimap = read.table(paste0(base_path, "/input/aliases/UniMap.txt"),header = TRUE, sep = "\t", stringsAsFactors = FALSE)
quant_unimap = read.table(paste0(base_path, "/input/aliases/combined_unimap.txt"),header = TRUE, sep = "\t", stringsAsFactors = FALSE)
quant_unimap <- unique(quant_unimap)
source(paste0(base_path, "/code/functions/evidence2inputs.R"))
#create_artMSfiles, run_artMS
source(paste0(base_path, "/code/functions/score_interactions.R"))
#run_FCA, run_FCB, run_saintx, run_saintq, write_params
source(paste0(base_path, "/code/functions/score_interactomes.R"))
#get_comps, get_prots, get_fisher, iref_response_list
source(paste0(base_path, "/code/functions/permutation_functions.R"))
#get_fisher, get_OR, get_prots, get_sig_compl, perm_viz, permute_status
ev_file = paste0(base_path, "/input/evidence/expTFs/bg15_evidence.txt")
key_file= paste0(base_path, "/input/evidence/expTFs/keys_bg15.txt")
# Creates files necessary to run FC, saintq, and saint analysis - uncomment if these files do not exist
create_artMSfiles(int_type, key_file)
ev = read.table(paste0(base_path, "/input/evidence/expTFs/bg15_evidence.txt"))
ev = read.table(paste0(base_path, "/input/evidence/expTFs/bg15_evidence.txt"),
sep = "\t", fill = T, stringsAsFactors = FALSE)
View(ev)
ev = read.table(paste0(base_path, "/input/evidence/expTFs/bg15_evidence.txt"),
sep = "\t", header = T, stringsAsFactors = FALSE)
View(ev)
which(grep("gko",ev$Experiment))
which(grepl("gko",ev$Experiment))
ctrl = ev[which(grepl("gko",ev$Experiment)),]
View(ctrl)
old = ev[which(grepl("old",ev$Experiment)),]
wt = ev[which(grepl("wt_g",ev$Experiment)),]
g296 = ev[which(grepl("296",ev$Experiment)),]
test = rbind(ctrl,old)
View(test)
write.table(rbind(ctrl,old), file = paste0(base_path, "
/input/evidence/expTFs/old_gata4_evidence.txt"),
row.names = F, quote = F)
write.table(rbind(ctrl,old),
file = paste0(base_path, "/input/evidence/expTFs/old_gata4_evidence.txt"),
row.names = F, quote = F)
write.table(rbind(ctrl,old),
file = paste0(base_path, "/input/evidence/expTFs/old_gata4_evidence.txt"),
sep = "\t", row.names = F, quote = F)
write.table(rbind(ctrl,wt),
file = paste0(base_path, "/input/evidence/expTFs/wt_gata4_evidence.txt"),
sep = "\t", row.names = F, quote = F)
write.table(rbind(ctrl,g296),
file = paste0(base_path, "/input/evidence/expTFs/g296s_gata4_evidence.txt"),
sep = "\t", row.names = F, quote = F)
int_type="old_gata4"
ev_file = paste0(base_path, "/input/evidence/expTFs/", int_type, "_evidence.txt")
key_file= paste0(base_path, "/input/evidence/expTFs/keys_", int_type,".txt")
# Creates files necessary to run FC, saintq, and saint analysis - uncomment if these files do not exist
create_artMSfiles(int_type, key_file)
####################################################
# Read in the functions
####################################################
source(paste0(base_path, "/code/functions/evidence2inputs.R"))
# Creates files necessary to run FC, saintq, and saint analysis - uncomment if these files do not exist
create_artMSfiles(int_type, key_file)
# Creates files necessary to run FC, saintq, and saint analysis - uncomment if these files do not exist
create_artMSfiles(int_type, key_file)
setwd(paste0(base_path, "/intermediate/MS_QC/", int_type, "_msspc"))
setwd(paste0(base_path, "/intermediate/MS_QC/", int_type, "_msspc"))
run_artMS(int_type, ev_file, key_file, "msspc")
####################################################
# Read in the functions
####################################################
source(paste0(base_path, "/code/functions/evidence2inputs.R"))
# Creates files necessary to run FC, saintq, and saint analysis - uncomment if these files do not exist
create_artMSfiles(int_type, key_file)
setwd(paste0(base_path, "/intermediate/MS_QC/", int_type, "_msspc"))
run_artMS(int_type, ev_file, key_file, "msspc")
####################################################
# Read in the functions
####################################################
source(paste0(base_path, "/code/functions/evidence2inputs.R"))
run_artMS(int_type, ev_file, key_file, "msspc")
run_artMS(int_type, ev_file, key_file, "msspc")
setwd(paste0(base_path, "/intermediate/MS_QC/", int_type, "_msint"))
run_artMS(int_type, ev_file, key_file, "msint")
level = "protein"
setwd(paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type))
in_file = paste0("saintq_input_", level, "s.txt")
for (normYN in c("true", "false")){
param_out = paste0( level, "_norm", normYN, ".txt")
write_params(normYN, in_file, level, param_out)
out_file = paste0(base_path, "/intermediate/interaction_scoring/saintq/", int_type, "_", level, "_norm_", normYN, ".txt")
run_saintq(paste0(base_path, "/input/evidence/expTFs/saintq_inputs/", int_type),param_out, in_file, out_file)
}
normYN = "true"
param_out = paste0( level, "_norm", normYN, ".txt")
write_params(normYN, in_file, level, param_out)
out_file = paste0(base_path, "/intermediate/interaction_scoring/saintq/", int_type, "_", level, "_norm_", normYN, ".txt")
out_file
run_saintq(paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type),param_out, in_file, out_file)
path2saintq
path2saintq = paste0(base_path, "/code/saintq/bin/saintq")
path2saintq
level
# APMS data for the three interactomes
for (int_type in c("old_gata4", "wt_gata4", "g296s_gata4")){
ev_file = paste0(base_path, "/input/evidence/expTFs/", int_type, "_evidence.txt")
key_file= paste0(base_path, "/input/evidence/expTFs/keys_", int_type,".txt")
# Creates files necessary to run FC, saintq, and saint analysis - uncomment if these files do not exist
create_artMSfiles(int_type, key_file)
setwd(paste0(base_path, "/intermediate/MS_QC/", int_type, "_msspc"))
run_artMS(int_type, ev_file, key_file, "msspc")
setwd(paste0(base_path, "/intermediate/MS_QC/", int_type, "_msint"))
run_artMS(int_type, ev_file, key_file, "msint")
# Run saintq with all possible parameter files
for(level in c("peptide", "protein")){
setwd(paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type))
in_file = paste0("saintq_input_", level, "s.txt")
normYN = "true"
param_out = paste0( level, "_norm", normYN, ".txt")
write_params(normYN, in_file, level, param_out)
out_file = paste0(base_path, "/intermediate/interaction_scoring/saintq/", int_type, "_", level, "_norm_", normYN, ".txt")
run_saintq(paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type),param_out, in_file, out_file)
}
}
# APMS data for the three interactomes
for (int_type in c("old_gata4", "wt_gata4", "g296s_gata4")){
ev_file = paste0(base_path, "/input/evidence/expTFs/", int_type, "_evidence.txt")
key_file= paste0(base_path, "/input/evidence/expTFs/keys_", int_type,".txt")
# Creates files necessary to run FC, saintq, and saint analysis - uncomment if these files do not exist
create_artMSfiles(int_type, key_file)
setwd(paste0(base_path, "/intermediate/MS_QC/", int_type, "_msspc"))
run_artMS(int_type, ev_file, key_file, "msspc")
setwd(paste0(base_path, "/intermediate/MS_QC/", int_type, "_msint"))
run_artMS(int_type, ev_file, key_file, "msint")
# Run saintq with all possible parameter files
for(level in c("peptide", "protein")){
setwd(paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type))
in_file = paste0("saintq_input_", level, "s.txt")
normYN = "true"
param_out = paste0( level, "_norm", normYN, ".txt")
write_params(normYN, in_file, level, param_out)
out_file = paste0(base_path, "/intermediate/interaction_scoring/saintq/", int_type, "_", level, "_norm_", normYN, ".txt")
run_saintq(paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type),param_out, in_file, out_file)
}
}
# Check stats for just QuantiSNP
QSNP = read.table(paste0(base_path,
"/input/rawCNVs/PCGC0045928_CNV__v1_QuantiSNP_ConcordInh_NoROH.txt_CLEAN.rawcnv"),
sep = "\t", header = TRUE, stringsAsFactors = FALSE)
base_path = "/Users/student/Documents/PollardLab/TAD"
# Check stats for just QuantiSNP
QSNP = read.table(paste0(base_path,
"/input/rawCNVs/PCGC0045928_CNV__v1_QuantiSNP_ConcordInh_NoROH.txt_CLEAN.rawcnv"),
sep = "\t", header = TRUE, stringsAsFactors = FALSE)
QSNP = QSNP[which(QSNP$BlindedID != "GA-H12"),]
n_varQ = as.data.frame(table(QSNP$BlindedID))
summary(n_varQ$Freq)
hist(n_varQ$Freq)
View(QSNP)
names(QSNP)
head(QSNP[,c(10:17)])
# only consider variants found by all three
high_con_QSNP = QSNP[which(QSNP$FreqQuantiSNPOverlap == 1 & QSNP$FreqNexusOverlap == 1),]
View(high_con_QSNP)
# only consider variants found by all three
high_con_QSNP = QSNP[which(QSNP$FreqPennCNVOverlap == 1 & QSNP$FreqNexusOverlap == 1),]
h_varQ = as.data.frame(table(high_con_QSNP$BlindedID))
summary(h_varQ$Freq)
hist(h_varQ$Freq)
# Deconvolute chr/start/end column
library(tidyr)
names(high_con_QSNP)
View(QSNP)
names(QSNP)[10]
names(QSNP)[14]
base_path = "/Users/student/Documents/PollardLab/TAD"
snvs = read.table(paste0(base_path, "/input/PCGC_variants/QSNP.bed"),
sep="\t", fill=TRUE, stringsAsFactors = FALSE)
names(snvs) = c("chr", "start", "stop", "numsnp", "length", "CN", "ChipID",
"startsnp", "endsnp", "confidence", "algorithm", "PennCNVOverlap",
"FreqPennCNVOverlap", "QuantiSNPOverlap","FreqQuantiSNPOverlap",
"NexusOverlap", "FreqNexusOverlap", "BlindedID",
"InheritFromMother50%Overlap", "FreqInheritFromMotherOverlap",
"InheritFromFather50%Overlap","FreqInheritFromFatherOverlap",
'InheritToProband50%Overlap',"FreqInheritToProbandOverlap",
"InheritFromMother50%OverlapDiffCN",
"FreqInheritFromMotherOverlapDiffCN",
"InheritFromMotherDiffCN", "InheritFromFather50%OverlapDiffCN",
"FreqInheritFromFatherOverlapDiffCN", "InheritFromFatherDiffCN",
"InheritToProband50%OverlapDiffCN",
"FreqInheritToProbandOverlapDiffCN", "InheritToProbandDiffCN",
"MFPTrioState", "DenovoCall", "Gene", "Distance")
# Remove ridiculous individual
snvs = snvs[which(snvs$BlindedID != "GA-H12"),]
# Baseline
nSNVs_100 = as.data.frame(table(snvs[which(as.numeric(snvs$length) >= 100),
"BlindedID"]))
nSNVs_1000 = as.data.frame(table(snvs[which(as.numeric(snvs$length) >= 1000),
"BlindedID"]))
View(nSNVs_100)
View(nSNVs_100)
summary(nSNVs_100)
summary(nSNVs_1000)
hist(nSNVs_100$Freq)
hist(nSNVs_1000$Freq)
hist(nSNVs_100$Freq)
hist(nSNVs_1000$Freq)
# Read in patient metadata
metadata1 = read.table(paste0(base_path,
"/input/PCGC_variants/pheno_only.txt"),
sep = "\t", fill = TRUE, header = TRUE, stringsAsFactors = FALSE)
metadata2 = read.table(paste0(base_path,
"/input/PCGC_variants/PCGC_cases_WGS_metadata.txt"),
sep = "\t", fill = TRUE, header = TRUE, stringsAsFactors = FALSE)
unique(snvs$BlindedID[which(!snvs$BlindedID %in% c(metadata1$Blinded_ID, metadata2$Blinded_ID))])
View(metadata1)
unique(snvs$BlindedID[which(snvs$BlindedID %in% c(metadata1$Blinded_ID, metadata2$Blinded_ID))])
# Function to count number of characters in a thing
countCharOccurrences <- function(char, s) {
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
d = as.list(seq_len(nrow(high_con_snvs)))
CHD_s = metadata1$Blinded_ID[which(metadata1$NDD == "No")]
CHD_NDDs = metadata1$Blinded_ID[which(metadata1$NDD == "Yes")]
CHD_Unks = metadata1$Blinded_ID[which(metadata1$NDD == "Unknown")]
for (i in c(1:nrow(high_con_snvs))){
### Issue: who are the people whose Blinded IDs start with letters
if(!startsWith(high_con_snvs[i,"BlindedID"], "1-")){
next
}
# Get variant type
if (as.numeric(high_con_snvs[i,"CN"]) < 2){
var_type = "copy number loss"
} else {
var_type = "copy number gain"
}
# Get patient group
#CHD_ is CHD only, CHD_NDD is both, CHD_unk is unknown NDD status, CHD_parent
if (countCharOccurrences("-", high_con_snvs[i,"BlindedID"]) > 1){
patient_group = "CHD_parent"
} else if (high_con_snvs[i,"BlindedID"] %in% CHD_s){
patient_group = "CHD_"
} else if (high_con_snvs[i,"BlindedID"] %in% CHD_Unks){
patient_group = "CHD_unk"
} else if (high_con_snvs[i,"BlindedID"] %in% CHD_NDDs){
patient_group = "CHD_NDD"
}
# Create vector to add to dataframe
vec = c(high_con_snvs[i,1],high_con_snvs[i,2],high_con_snvs[i,3],
var_type, high_con_snvs[i,"BlindedID"], patient_group)
d[[i]] <- vec
}
list.condition <- sapply(d, function(x) class(x)!="integer")
d_reduced  <- d[list.condition]
variant_frame = do.call(rbind, d_reduced)
high_con_snvs = snvs
# Function to count number of characters in a thing
countCharOccurrences <- function(char, s) {
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
d = as.list(seq_len(nrow(high_con_snvs)))
CHD_s = metadata1$Blinded_ID[which(metadata1$NDD == "No")]
CHD_NDDs = metadata1$Blinded_ID[which(metadata1$NDD == "Yes")]
CHD_Unks = metadata1$Blinded_ID[which(metadata1$NDD == "Unknown")]
for (i in c(1:nrow(high_con_snvs))){
### Issue: who are the people whose Blinded IDs start with letters
if(!startsWith(high_con_snvs[i,"BlindedID"], "1-")){
next
}
# Get variant type
if (as.numeric(high_con_snvs[i,"CN"]) < 2){
var_type = "copy number loss"
} else {
var_type = "copy number gain"
}
# Get patient group
#CHD_ is CHD only, CHD_NDD is both, CHD_unk is unknown NDD status, CHD_parent
if (countCharOccurrences("-", high_con_snvs[i,"BlindedID"]) > 1){
patient_group = "CHD_parent"
} else if (high_con_snvs[i,"BlindedID"] %in% CHD_s){
patient_group = "CHD_"
} else if (high_con_snvs[i,"BlindedID"] %in% CHD_Unks){
patient_group = "CHD_unk"
} else if (high_con_snvs[i,"BlindedID"] %in% CHD_NDDs){
patient_group = "CHD_NDD"
}
# Create vector to add to dataframe
vec = c(high_con_snvs[i,1],high_con_snvs[i,2],high_con_snvs[i,3],
var_type, high_con_snvs[i,"BlindedID"], patient_group)
d[[i]] <- vec
}
list.condition <- sapply(d, function(x) class(x)!="integer")
d_reduced  <- d[list.condition]
variant_frame = do.call(rbind, d_reduced)
write.csv(variant_frame, paste0(base_path, "/input/PCGC_variants/processsed_CNVs.csv"),
quote = FALSE, row.names = FALSE)
View(variant_frame)
View(variant_frame)
unique(variant_frame[,6])
hist(nSNVs_100$Freq)
hist(nSNVs_1000$Freq)
summary(v_nSNVs_1000)
summary(nSNVs_1000)
