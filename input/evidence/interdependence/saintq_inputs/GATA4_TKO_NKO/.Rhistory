#### original interactomes ####
ints = read.table(paste0(base_path, "/input/precomp_interactomes/interactomes.tsv"),
sep = "\t",fill = TRUE, header = TRUE, stringsAsFactors = FALSE)
tab = ints[which(ints$Bait == int_type),]
# Choose significant genes
tab_sig = subset(tab, tab$BFDR < 0.05)
#if(int_type == "NKX25"){
#  tab_sig = subset(tab, tab$BFDR < 0.1)
#} else {
#  tab_sig = subset(tab, tab$BFDR < 0.02)
#}
#### Corum expansion ####
names(tab_sig)[which(names(tab_sig) == "Prey_proteinname")] <- "Prey"
#complexes = get_comps(tab_sig$Prey,corum, enriched=FALSE)
complexes = get_comps(tab_sig$Prey, corum, enriched=TRUE)
interactome_prots = unique(c(get_prots(complexes, corum), tab_sig$Prey))
# Get gene names for interactome
interactome_genes = quant_unimap$GeneSymbol[match(interactome_prots, quant_unimap$UniProt)]
interactome_genes = unlist(strsplit(interactome_genes, "; "))
# Remove blacklist genes from interactome
blacklist = read.table(paste0(base_path, "/intermediate/rnaseq/", int_type, "_negativeFC_blacklist.txt"))
geneList <- interactome_genes[which(!interactome_genes %in% blacklist)]
# Create plots and permutation records
for(mut_type in c("DNV", "LoF", "syn-DNV")){
if(mut_type == "DNV"){cases = DNV_cases; ctrls = DNV_ctrls
} else if(mut_type == "LoF"){cases = LoF_cases; ctrls = LoF_ctrls
} else if(mut_type == "syn-DNV"){cases = DNV_case_syn; ctrls = DNV_ctrl_syn
}
true_OR = get_OR(cases, ctrls, geneList, fisher = TRUE, int_type=int_type, mut_type)
permList <- permute_status(cases, ctrls, geneList, n_perm)
img = perm_viz(permList, true_OR, mut_type, int_type, n_tests=3)
ggsave(file= paste0(out_path, "/", int_type, "_", mut_type, ".svg"), plot = img)
# Save out record of permutation data
true_row = as.data.frame(true_OR)
true_row$type = "true"
perm_rows = as.data.frame(permList)
perm_rows$type = "permuted"
names(true_row) = c("OddsRatio", "type")
names(perm_rows) = c("OddsRatio", "type")
perm_record = rbind(true_row, perm_rows)
write.table(perm_record,
file = paste0(out_path, "/perm_score_lists/", int_type, "_",mut_type,".txt"),
row.names = FALSE, quote = FALSE)
}
}
base_path = "/Users/student/Documents/PollardLab/APMS2"
out_path = paste0(base_path, "/output/pathogenicity_scoring")
source(paste0(base_path, "/code/load_data/load_variants.R"))
# Combine variants into a single object
cols <- c("Blinded.ID", "Cardiac.Category", "EM", "NDD", "CHR", "POS", "REF", "ALT", "Gene","pLI.Score")
mut_table <- rbind(DNV_cases[,cols], LoF_cases[,cols])
norm_ints = read.table(paste0(base_path, "/input/precomp_interactomes/saintq_n_interactomes.csv"),
sep = ",", header = TRUE, stringsAsFactors = FALSE)
og_ints = read.table(paste0(base_path, "/input/precomp_interactomes/interactomes.tsv"),
sep = "\t",fill = TRUE, header = TRUE, stringsAsFactors = FALSE)
int_genes = unique(c(norm_ints$Prey_geneName, og_ints$Prey_genename))
int_genes = unique(unlist(strsplit(int_genes, "; ")))
candidates = int_genes[which(int_genes %in% mut_table$Gene)]
gene_data = mut_table[which(mut_table$Gene %in% candidates),]
exon_coords <- read.table(paste0(base_path, "/input/databases/gene_start_stop.txt"),
sep = "\t", header = TRUE)
exon_coords$CDS.Length <- NULL
exon_coords$geneLength <- exon_coords$Gene.end..bp. - exon_coords$Gene.start..bp.
exon_coords <- unique(exon_coords)
freq_table <- as.data.frame(table(gene_data$Gene))
freq_table$geneLength <- exon_coords$geneLength[match(freq_table$Var1, exon_coords$Gene.name)]
freq_table$mutperkb <- (freq_table$Freq / freq_table$geneLength) * 1000
gene_data$mutperkb <- freq_table$mutperkb[match(gene_data$Gene, freq_table$Var1)]
# Normalize the mutperkb score to be between 0.5 and 1 - we don't want to penalize
# rarely-mutated genes too harshly
range51 <- function(x){(0.5*(x-min(x))/(max(x)-min(x)) + 0.5)}
gene_data$mutperkb[is.na(gene_data$mutperkb)] = 0.000001
gene_data$mutperkb = gene_data$mutperkb + 0.000001
gene_data$norm_mutperkb = range51(log(gene_data$mutperkb))
### Note : is there a better way to handle indels?
# Load in PhyloP data
phylop <- read.table(paste0(base_path, "/input/databases/phyloP.txt"),
sep = "\t", header = FALSE, stringsAsFactors = FALSE)
names(phylop) = c("CHR", "POS", "STOP", "phyloP")
phylop = phylop[which(phylop$POS %in% gene_data$POS),]
# Create stop column in gene data
gene_data$STOP = 0
for (i in c(1:nrow(gene_data))){
gene_data$STOP[i] = max(c(nchar(gene_data$REF[i]), nchar(gene_data$ALT[i]))) + as.numeric(gene_data$POS[i]) - 1
}
# Merge by Chr/Start/Stop data
mg = merge(gene_data, phylop, by = c("CHR", "POS"), all.x=TRUE)
median_phylop = median(mg$phyloP[!is.na(mg$phyloP)])
mg$phyloP[is.na(mg$phyloP)] <- median_phylop
# Normalize between 0 and 1
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
mg$phyloP = range01(as.numeric(mg$phyloP))
#Add to gene_data
gene_data$phyloP <- mg$phyloP
# 0.5 penalty for individuals with NDD
gene_data$NDD_score = 1
gene_data$NDD_score[which(gene_data$NDD == "Yes")] = 0.5
broad_expr = read.csv(paste0(base_path, "/input/rnaseq/BroadPopulations_AverageExpression.csv"))
myo_expr = read.csv(paste0(base_path, "/input/rnaseq/Myocardium_AverageExpression.csv"))
broad_expr$Myocardium <- NULL
row.names(myo_expr) = myo_expr[,1]
myo_expr[,1] <- NULL
myo_expr$max <- NULL
myo_expr$max = apply(myo_expr, 1, function(x) max(x))
broad_expr$myocardium = myo_expr$max[match(broad_expr$X, row.names(myo_expr))]
broad_expr$myo_spec = broad_expr$myocardium / (rowSums(broad_expr[,c(2:7)]))
broad_expr$myo_spec[is.nan(broad_expr$myo_spec)] = 0
broad_expr$myo_spec[is.infinite(broad_expr$myo_spec)] = 200
# Homology between mouse and human gene names
homologene = read.table(paste0(base_path, "/input/databases/homologene.txt"),
sep="\t", header = TRUE, stringsAsFactors = FALSE)
hom_human = homologene[which(homologene$NCBI.Taxon.ID == "9606"),]
hom_mouse = homologene[which(homologene$NCBI.Taxon.ID == "10090"),]
homologene = merge(hom_human, hom_mouse, by = "HomoloGene.ID")
broad_expr$Gene = homologene$Symbol.x[match(broad_expr$X, homologene$Symbol.y)]
### Note: this is not ideal; is there a better homology conversion method?
library(dplyr)
broad_expr$Gene[is.na(broad_expr$Gene)] = toupper(broad_expr$X[is.na(broad_expr$Gene)])
gene_data$specificity_score = broad_expr$myo_spec[match(gene_data$Gene, broad_expr$Gene)]
median_spec = median(gene_data$specificity_score[!is.na(gene_data$specificity_score)])
gene_data$specificity_score[is.na(gene_data$specificity_score)] <- median_spec
# Normalize between 0 and 1
gene_data$specificity_score = range01(log(as.numeric(gene_data$specificity_score)))
# Replace missing pLI with median)
median_pLI = median(as.numeric(gene_data$pLI.Score[!is.na(gene_data$pLI.Score)]))
gene_data$pLI.Score[is.na(gene_data$pLI.Score)] <- median_pLI
# Add pseudocount to pLI
gene_data$pLI.Score[which(as.numeric(gene_data$pLI.Score) == 0)] <- 0.001
# Reduce dataframe
numerical_data = as.data.frame(
gene_data[,c("pLI.Score","norm_mutperkb","NDD_score","specificity_score","phyloP")])
df2 <- mutate_all(numerical_data, function(x) as.numeric(as.character(x)))
df2$mult_score = apply(df2, 1, prod)
df2$add_score = rowSums(df2[,c(1:5)])
final <- cbind(gene_data[,c("Gene","Blinded.ID","Cardiac.Category","CHR","POS", "REF", "ALT")],
df2)
final_mult <- final[order(-final$mult_score),]
final_add <- final[order(-final$add_score),]
write.csv(final_mult, paste0(base_path, "/output/pathogenicity_scoring/median_permuted_scores.csv"),
quote = FALSE, row.names = FALSE)
######################## GATA4 only ########################
GATA_genes = unique(c(norm_ints$Prey_genename[which(norm_ints$Bait == "GATA4")],
og_ints$Prey_genename[which(norm_ints$Bait == "GATA4")]))
GATAs = final_mult[which(final_mult$Gene %in% GATA_genes),]
TBXs = final_mult[which(final_mult$Gene %in% og_ints$Prey_genename[which(norm_ints$Bait == "TBX5")]),]
og_ints$Prey_genename[which(norm_ints$Bait == "TBX5")]
View(og_ints)
og_ints$Prey_genename
og_ints[which(og_ints$Bait == "GATA4")]
og_ints[which(og_ints$Bait == "GATA4"),]
og_ints[which(og_ints$Bait == "TBX5"),]
og_ints$Prey_genename[which(og_ints$Bait == "TBX5")]
og_ints$Prey_genename[which(og_ints$Bait == "TBX5")]
TBXs = final_mult[which(final_mult$Gene %in% og_ints$Prey_genename[which(og_ints$Bait == "TBX5")]),]
View(TBXs)
GATA_og = final_mult[which(final_mult$Gene %in% og_ints$Prey_genename[which(norm_ints$Bait == "GATA4")]),]
length(og_ints$Prey_genename[which(og_ints$Bait == "GATA4")])
length(norm_ints$Prey_genename[which(norm_ints$Bait == "TBX5")])
length(unique(og_ints$Prey_genename[which(og_ints$Bait == "GATA4")]))
length(unique(final_mult$Gene))
final_mult$Gene %in% og_ints$Prey_genename[which(og_ints$Bait == "GATA4")]
final_mult$Gene %in% og_ints$Prey_genename[which(og_ints$Bait == "GATA4")]
final_mult$Gene %in% norm_ints$Prey_genename[which(norm_ints$Bait == "GATA4")]
# All of these mutations are in the GATA4 interactome...
GATA_genes = unique(c(norm_ints$Prey_genename[which(norm_ints$Bait == "GATA4")],
og_ints$Prey_genename[which(norm_ints$Bait == "GATA4")]))
length(GATA_genesss)
length(GATA_geness)
length(GATA_genes)
final_mult$Gene %in% GATA_genes
# All of these mutations are in the GATA4 interactome...
GATA_genes = unique(c(norm_ints$Prey_genename[which(norm_ints$Bait == "GATA4")],
og_ints$Prey_genename[which(og_ints$Bait == "GATA4")]))
GATAs = final_mult[which(final_mult$Gene %in% GATA_genes),]
write.csv(GATAs, paste0(base_path, "/output/pathogenicity_scoring/GATA4_median_permuted_scores.csv"),
quote = FALSE, row.names = FALSE)
for(chr in c(1:22, "X")){
var_list = final_mult[which(final_mult$CHR == chr),]
if(nrow(var_list) > 1){
# Sort numerically
coords = sort(as.numeric(var_list$POS))
# Check whether any mutations next to each other are within 800bp in either direction
for (i in c(1:length(coords))){
if(coords[i] - coords[i+1] <= 800 && coords[i] - coords[i+1] >= -800){
print(paste0("Nearby variants! chr", chr, ":", coords[i], "-", coords[i+1]))
}
}
}
}
coords
i = 1
coords[i] - coords[i+1] <= 800
coords[i] - coords[i+1] >= -800
coords[i] - coords[i+1] <= 800 && coords[i] - coords[i+1] >= -800
for(chr in c(1:22, "X")){
var_list = final_mult[which(final_mult$CHR == chr),]
if(nrow(var_list) > 1){
# Sort numerically
coords = sort(as.numeric(var_list$POS))
# Check whether any mutations next to each other are within 800bp in either direction
for (i in c(1:length(coords))){
if(coords[i] - coords[i+1] <= 800 && coords[i] - coords[i+1] >= -800){
print(paste0("Nearby variants! chr", chr, ":", coords[i], "-", coords[i+1]))
}
}
}
}
i
for(chr in c(1:22, "X")){
var_list = final_mult[which(final_mult$CHR == chr),]
if(nrow(var_list) > 1){
# Sort numerically
coords = sort(as.numeric(var_list$POS))
# Check whether any mutations next to each other are within 800bp in either direction
for (i in c(1:length(coords)-1)){
if(coords[i] - coords[i+1] <= 800 && coords[i] - coords[i+1] >= -800){
print(paste0("Nearby variants! chr", chr, ":", coords[i], "-", coords[i+1]))
}
}
}
}
i
chr
var_list = final_mult[which(final_mult$CHR == chr),]
var_list
# Sort numerically
coords = sort(as.numeric(var_list$POS))
# Sort numerically
coords = sort(as.numeric(var_list$POS))
coordsss
coords
i
c(1:length(coords)-1)
# Check whether any mutations next to each other are within 800bp in either direction
for (i in c(1:(length(coords)-1)){
if(coords[i] - coords[i+1] <= 800 && coords[i] - coords[i+1] >= -800){
success= paste0("Nearby variants! chr", chr, ":", coords[i], "-", coords[i+1])
print(success)
res = c(res, success)
}
}
}
}
res = c()
for(chr in c(1:22, "X")){
var_list = final_mult[which(final_mult$CHR == chr),]
if(nrow(var_list) > 1){
# Sort numerically
coords = sort(as.numeric(var_list$POS))
# Check whether any mutations next to each other are within 800bp in either direction
for (i in c(1:(length(coords)-1))){
if(coords[i] - coords[i+1] <= 800 && coords[i] - coords[i+1] >= -800){
success= paste0("Nearby variants! chr", chr, ":", coords[i], "-", coords[i+1])
print(success)
res = c(res, success)
}
}
}
}
res
read.table(passte0(base_path, "/intermediate/interaction_scoring/saintq/NKX25_peptide_norm_true.txt"))
read.table(paste0(base_path, "/intermediate/interaction_scoring/saintq/NKX25_peptide_norm_true.txt"))
read.table(paste0(base_path, "/intermediate/interaction_scoring/saintq/NKX25_peptide_norm_true.txt"),
sep = "\t")
read.table(paste0(base_path, "/intermediate/interaction_scoring/saintq/NKX25_peptide_norm_true.txt"),
sep = "\t", fill = TRUE)
NK = read.table(paste0(base_path, "/intermediate/interaction_scoring/saintq/NKX25_peptide_norm_true.txt"),
sep = "\t", fill = TRUE)
NK = NK[which(NK$V6 <= 0.1)]
NK = read.table(paste0(base_path, "/intermediate/interaction_scoring/saintq/NKX25_peptide_norm_true.txt"),
sep = "\t", fill = TRUE, stringsAsFactors = FALSE)
NK = NK[which(NK$V6 <= 0.1)]
View(NK)
naames(NK)
names(NK)
NK = NK[which(NK$V6 <= 0.1),]
View(NK)
names(NK) = c("Bait", "Prey_proteinname", "Rep", "Count", "Score", "BFDR")
unimap <- read.table(paste0(base_path, "/input/aliases/combined_unimap.txt"),
header = TRUE, sep = "\t", stringsAsFactors = FALSE)
NK$GeneSymbol = unimap$GeneSymbol[match(NK$Prey_proteinname, unimap$UniProt)]
View(NK)
write.table(NK, paste0(base_path, "NKX25_cutoff1.csv"), row.names = FALSE, quote = FALSE)
write.table(NK, paste0(base_path, "/NKX25_cutoff1.csv"), row.names = FALSE, quote = FALSE, sep = ",")
variant = final_mult[which(final_mult$CHR == chr &&
(final_mult$POS == coords[i] | final_mult$POS == coords[i+1])),]
variant
genes = var_list[match(var_list$POS, coords),]
View(genes)
coords
genes = var_list[match(var_list$POS, coords),]
genes
var_list[match(coords, var_list$POS),]
genes = var_list[match(coords, var_list$POS),]
res = c()
for(chr in c(1:22, "X")){
var_list = final_mult[which(final_mult$CHR == chr),]
if(nrow(var_list) > 1){
# Sort numerically
coords = sort(as.numeric(var_list$POS))
genes = var_list[match(coords, var_list$POS),]
# Check whether any mutations next to each other are within 800bp in either direction
for (i in c(1:(length(coords)-1))){
if(coords[i] - coords[i+1] <= 800 && coords[i] - coords[i+1] >= -800){
success= paste0("Nearby variants! chr", chr, ":", coords[i], ",", coords[i+1], " in gene ", genes[i,"Gene"])
print(success)
}
}
}
}
coords[i]
coords[i+1]
res = c()
for(chr in c(1:22, "X")){
var_list = final_mult[which(final_mult$CHR == chr),]
if(nrow(var_list) > 1){
# Sort numerically
coords = sort(as.numeric(var_list$POS))
genes = var_list[match(coords, var_list$POS),]
# Check whether any mutations next to each other are within 800bp in either direction
for (i in c(1:(length(coords)-1))){
if(coords[i] - coords[i+1] <= 800 && coords[i] - coords[i+1] >= -800){
success= paste0("Nearby variants! chr", chr, ":", coords[i], ",", coords[i+1], " in gene ", genes[i,"Gene"])
print(success)
res = c(res, success)
}
}
}
}
ress
res
genes = c()
for(chr in c(1:22, "X")){
var_list = final_mult[which(final_mult$CHR == chr),]
if(nrow(var_list) > 1){
# Sort numerically
coords = sort(as.numeric(var_list$POS))
genes = var_list[match(coords, var_list$POS),]
# Check whether any mutations next to each other are within 800bp in either direction
for (i in c(1:(length(coords)-1))){
if(coords[i] - coords[i+1] <= 800 && coords[i] - coords[i+1] >= -800){
success= paste0("Nearby variants! chr", chr, ":", coords[i], ",", coords[i+1], " in gene ", genes[i,"Gene"])
print(success)
genes = c(genes, genes[i,"Gene"])
}
}
}
}
domain = final_mult[which(final_mult$Gene %in% genes),]
res = c()
for(chr in c(1:22, "X")){
var_list = final_mult[which(final_mult$CHR == chr),]
if(nrow(var_list) > 1){
# Sort numerically
coords = sort(as.numeric(var_list$POS))
genes = var_list[match(coords, var_list$POS),]
# Check whether any mutations next to each other are within 800bp in either direction
for (i in c(1:(length(coords)-1))){
if(coords[i] - coords[i+1] <= 800 && coords[i] - coords[i+1] >= -800){
success= paste0("Nearby variants! chr", chr, ":", coords[i], ",", coords[i+1], " in gene ", genes[i,"Gene"])
print(success)
res = c(res, genes[i,"Gene"])
}
}
}
}
res
domain = final_mult[which(final_mult$Gene %in% res),]
View(domain)
domain = domain[order(domain$Gene),]
View(domain)
domain = domain[order(domain$Gene, domain$mult_score),]
View(domain)
domain = domain[order(c(domain$Gene, domain$mult_score)),]
View(domain)
domain = final_mult[which(final_mult$Gene %in% res),]
domain = domain[order(domain$Gene, domain$mult_score),]
View(domain)
write.table(domain, file = paste0(base_path, "/output/pathogenicity_scoring/nearby_variants.txt"), sep = "\t",
row.names = FALSE, quote = FALSE)
write.csv(domain, file = paste0(base_path, "/output/pathogenicity_scoring/nearby_variants.txt"),
row.names = FALSE, quote = FALSE)
write.csv(domain, file = paste0(base_path, "/output/pathogenicity_scoring/nearby_variants.csv"),
row.names = FALSE, quote = FALSE)
base_path = "/Users/student/Documents/PollardLab/APMS2"
source(paste0(base_path, "/code/functions/evidence2inputs.R"))
#create_artMSfiles, run_artMS
source(paste0(base_path, "/code/functions/score_interactions.R"))
#run_FCA, run_FCB, run_saintx, run_saintq, write_params
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("artMS", version = "3.8")
base_path = "/Users/student/Documents/PollardLab/APMS2"
source(paste0(base_path, "/code/functions/evidence2inputs.R"))
#create_artMSfiles, run_artMS
source(paste0(base_path, "/code/functions/score_interactions.R"))
#run_FCA, run_FCB, run_saintx, run_saintq, write_params
int_type = "NKX25_GKO"
ev_file = paste0(base_path, "/input/evidence/interdependence/", int_type, "_evidence.txt")
key_file= paste0(base_path, "/input/evidence/interdependence/keys_", int_type, ".txt")
# Creates files necessary to run FC, saintq, and saint analysis - uncomment if these files do not exist
create_artMSfiles(int_type, key_file)
base_path = "/Users/student/Documents/PollardLab/APMS2"
source(paste0(base_path, "/code/functions/evidence2inputs.R"))
source(paste0(base_path, "/code/functions/score_interactions.R"))
ev_file = paste0(base_path, "/input/evidence/interdependence/", int_type, "_evidence.txt")
key_file= paste0(base_path, "/input/evidence/interdependence/keys_", int_type, ".txt")
# Creates files necessary to run FC, saintq, and saint analysis - uncomment if these files do not exist
create_artMSfiles(int_type, key_file)
# Create artMS input files
keys = read.table(paste0(base_path, "/input/evidence/expTFs/annotation_", int_type, ".txt"),
na.strings=c("", "NA"), sep = "\t", header = TRUE)
source(paste0(base_path, "/code/functions/evidence2inputs.R"))
# Creates files necessary to run FC, saintq, and saint analysis - uncomment if these files do not exist
create_artMSfiles(int_type, key_file)
setwd(paste0(base_path, "/intermediate/MS_QC/", int_type, "_msspc"))
run_artMS(int_type, ev_file, key_file, "msspc")
run_artMS(int_type, ev_file, key_file, "msspc")
setwd(paste0(base_path, "/intermediate/MS_QC/", int_type, "_msspc"))
run_artMS(int_type, ev_file, key_file, "msspc")
int_type
artmsQuantification(yaml_config_file = paste0(base_path, "/input/evidence/interdependence/", int_type, "_config.yaml"))
base_path
run_artMS(int_type, ev_file, key_file, "msspc")
artmsQuantification(yaml_config_file = paste0(base_path, "/input/evidence/interdependence/", int_type, "_config.yaml"))
run_artMS(int_type, ev_file, key_file, "msspc")
artmsQuantification(yaml_config_file = paste0(base_path, "/input/evidence/interdependence/", int_type, "_config.yaml"))
artmsEvidenceToSaintExpress(evidence_file = ev_file,
keys_file = key_file,
ref_proteome_file = paste0(base_path, "/input/databases/UP000005640_9606.fasta"),
quant_variable = quant_var,
output_file = paste0(base_path, "/input/evidence/interdependence/saintx_inputs/",int_type, "_", quant_var, ".txt"))
run_artMS(int_type, ev_file, key_file, "msspc")
quant_var = "msspc"
artmsEvidenceToSaintExpress(evidence_file = ev_file,
keys_file = key_file,
ref_proteome_file = paste0(base_path, "/input/databases/UP000005640_9606.fasta"),
quant_variable = quant_var,
output_file = paste0(base_path, "/input/evidence/interdependence/saintx_inputs/",int_type, "_", quant_var, ".txt"))
artmsEvidenceToSaintExpress(evidence_file = ev_file,
keys_file = key_file,
ref_proteome_file = paste0(base_path, "/input/databases/UP000005640_9606.fasta"),
quant_variable = quant_var,
output_file = paste0(base_path, "/input/evidence/interdependence/saintx_inputs/",int_type, "_", quant_var, ".txt"))
artmsEvidenceToSAINTq(evidence_file = ev_file,
keys_file = key_file,
output_dir = paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type))
setwd(paste0(base_path, "/intermediate/MS_QC/", int_type, "_msint"))
quant_var = "_msint"
run_artMS(int_type, ev_file, key_file, "msint")
artmsQuantification(yaml_config_file = paste0(base_path, "/input/evidence/interdependence/", int_type, "_config.yaml"))
quant_var
setwd(paste0(base_path, "/intermediate/MS_QC/", int_type, "_msspc"))
run_artMS(int_type, ev_file, key_file, "msspc")
quant_var = "msint"
artmsEvidenceToSaintExpress(evidence_file = ev_file,
keys_file = key_file,
ref_proteome_file = paste0(base_path, "/input/databases/UP000005640_9606.fasta"),
quant_variable = quant_var,
output_file = paste0(base_path, "/input/evidence/interdependence/saintx_inputs/",int_type, "_", quant_var, ".txt"))
artmsEvidenceToSAINTq(evidence_file = ev_file,
keys_file = key_file,
output_dir = paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type))
# Run saintq with desired parameters
for(level in c("peptide", "protein")){
setwd(paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type))
in_file = paste0("saintq_input_", level, "s.txt")
normYN = "true"
param_out = paste0( level, "_norm", normYN, ".txt")
write_params(normYN, in_file, level, param_out)
out_file = paste0(base_path, "/intermediate/interaction_scoring/saintq/", int_type, "_", level, "_norm_", normYN, ".txt")
run_saintq(paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type),param_out, in_file, out_file)
}
int_type = "GATA4_TKO_NKO"
ev_file = paste0(base_path, "/input/evidence/interdependence/", int_type, "_evidence.txt")
key_file= paste0(base_path, "/input/evidence/interdependence/keys_", int_type, ".txt")
# Creates files necessary to run FC, saintq, and saint analysis - uncomment if these files do not exist
create_artMSfiles(int_type, key_file)
setwd(paste0(base_path, "/intermediate/MS_QC/", int_type, "_msspc"))
run_artMS(int_type, ev_file, key_file, "msspc")
if(int_type != "NKX25"){
artmsQuantification(yaml_config_file = paste0(base_path, "/input/evidence/interdependence/", int_type, "_config.yaml"))
}
artmsQuantification(yaml_config_file = paste0(base_path, "/input/evidence/interdependence/", int_type, "_config.yaml"))
quant_var
artmsEvidenceToSaintExpress(evidence_file = ev_file,
keys_file = key_file,
ref_proteome_file = paste0(base_path, "/input/databases/UP000005640_9606.fasta"),
quant_variable = quant_var,
output_file = paste0(base_path, "/input/evidence/interdependence/saintx_inputs/",int_type, "_", quant_var, ".txt"))
artmsEvidenceToSAINTq(evidence_file = ev_file,
keys_file = key_file,
output_dir = paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type))
quant_var = "msspc"
artmsEvidenceToSaintExpress(evidence_file = ev_file,
keys_file = key_file,
ref_proteome_file = paste0(base_path, "/input/databases/UP000005640_9606.fasta"),
quant_variable = quant_var,
output_file = paste0(base_path, "/input/evidence/interdependence/saintx_inputs/",int_type, "_", quant_var, ".txt"))
artmsEvidenceToSAINTq(evidence_file = ev_file,
keys_file = key_file,
output_dir = paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type))
# Run saintq with desired parameters
for(level in c("peptide", "protein")){
setwd(paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type))
in_file = paste0("saintq_input_", level, "s.txt")
normYN = "true"
param_out = paste0( level, "_norm", normYN, ".txt")
write_params(normYN, in_file, level, param_out)
out_file = paste0(base_path, "/intermediate/interaction_scoring/saintq/", int_type, "_", level, "_norm_", normYN, ".txt")
run_saintq(paste0(base_path, "/input/evidence/interdependence/saintq_inputs/", int_type),param_out, in_file, out_file)
}
